@page "/counter"
@using Messenger.Blazor.Services

@inject IMessageProducer MessageProducer
@inject IMessageHolder MessageHolder
@inject IUser User
<PageTitle>Counter</PageTitle>

<h1>Chat</h1>

<section class="discussion">

@foreach (var message in MessageHolder.MessageList)
{
    if (!message.UserName.Equals(User.Name))
    {
        <div class="name name-right">@message.UserName</div>
        <div class="bubble recipient">
            <div>@message.Text</div>
        </div>
    }
    else
    {
        <div class="msg">
            <div class="name name-left">@message.UserName</div>
            <div class="bubble sender middle" @onclick="() => { message.DeleteButtonsVisibility = !message.DeleteButtonsVisibility; }">
                <div>@message.Text</div>
            </div>
        </div>
        if (message.DeleteButtonsVisibility)
        {
            <div class="rm-btns">
                <button class="btn rm-btn" @onclick="async() => await MessageHolder.DeleteMessage(message)">Usuń</button>
                <button class="btn rm-btn" @onclick="async() => await DeleteMessageToEveryone(message)">Usuń u wszystkich</button>
            </div> 
        }

    }
}

<input class="inpt" @bind="Text" />
<button class="btn btn-primary" @onclick="SendMessage">Send</button>

</section>

@code {

    private string? Text { get; set; }

    private List<string> _messages = new();

    private void SendMessage()
    {
        if(Text != null)
            MessageProducer.SendMessage(new Message()
            {
                UserName = User.Name,
                Text = Text
            });
    }

    private async Task DeleteMessageToEveryone(Message message)
    {
        await MessageHolder.DeleteMessage(message);
        MessageProducer.SendMessage(new Message()
        {
            Id = message.Id,
            DeleteMessage = true
        });
    }
}
