@page "/"
@using Messenger.Blazor.Services

@inject IMessageProducer MessageProducer
@inject IMessageHolder MessageHolder
@inject IUserService UserService
@inject IJSRuntime Js
@inject EventService EventService

<PageTitle>Messenger</PageTitle>

@if (UserService.UserName == null)
{
    <div class="login-form">
        <h3 >Login</h3>
        <input @bind="Name" placeholder="Username"/>
        <input type="password" @bind="Password" placeholder="Password"/>
        <button class="btn btn-primary" @onclick="() => { LoginFailed = UserService.Login(Name, Password); }">Login</button>
        @if (LoginFailed)
        {
            <div style="color:red" >Login Failed. Try Again</div>
        }
    </div>
}
else
{
    <div class="cont">


        @*@foreach(var t in GetUsersLastPendingMessage()) {<h6>@t.UserName</h6>}*@


    <h1 >Your name: @UserService.UserName</h1>
    <br />
    <br/>
    <h1 class="text-center">Chat</h1>

    <section class="discussion">

        @foreach (var message in MessageHolder.MessageList)
        {
                if (!message.IsPending)
                {
                    if (!message.UserName.Equals(UserService.UserName))
                    {
                        <div class="name name-right">@message.UserName</div>
                        <div class="bubble recipient">
                            <div>@message.Text</div>
                            <img src="@message.Source"/>
                        </div>
                    }
                    else
                    {
                        <div class="msg">
                            <div class="name name-left">@message.UserName</div>
                            <div class="bubble sender middle" @onclick="() => { message.DeleteButtonsVisibility = !message.DeleteButtonsVisibility; }">
                                <div>@message.Text</div>
                                <img src="@message.Source"/>
                            </div>
                        </div>
                        if (message.DeleteButtonsVisibility && message.MessageStatus==MessageStatus.None)
                        {
                            <div class="rm-btns">
                                <button class="btn rm-btn" @onclick="async() => await DeleteMessageByUser(message)">Usuń</button>
                                <button class="btn rm-btn" @onclick="async() => await DeleteMessageToEveryone(message)">Usuń u wszystkich</button>
                            </div>
                        }

                    }
                }
                @*else
                {
                    @foreach(var mess in GetUsersLastPendingMessage())
                    {
                        @if (pending_message_sent)
                        {
                            <h6>@message.UserName pisze...</h6> 
                        }
                    }
                }*@

        }
        @*@foreach (var message in MessageHolder.MessageList)
        {
            if (message.IsPending)*@
                @foreach(var mess in GetUsersLastPendingMessage())
                {
                    if (true)
                    {
                        <h6>@mess.UserName pisze...</h6> 
                    }
                }
                    
        @*}*@

        <input class="inpt" value=@Text @oninput="SendPendingMessage" />
        <button class="btn btn-primary" @onclick="SendMessage" >Send</button>
        <InputFile OnChange="ResizeAndDisplayImageUsingStreaming" />
        <img src="@src" />

    </section>
    </div>
                    @foreach(var ff in pendings_users)
                {
                    if (true)
                    {
                        <h6>@ff</h6> 
                    }
                }
}


@code {

    private string? Name { get; set; }
    private string? Password { get; set; }
    bool LoginFailed { get; set; }

    bool isTyping { get; set; }
    bool pending_message_sent { get; set; } = false;
    List<string> pendings_users = new List<string>();

    private List<Message> GetUsersLastPendingMessage()
    {
        var list_of_all_pendings = MessageHolder.MessageList.FindAll(FindUsersPendingMessages);
        var list_of_last_pendings = new List<Message>();

        foreach (var p in list_of_all_pendings)
        {
            if (!pendings_users.Contains(p.UserName)) pendings_users.Add(p.UserName);
        }
        foreach (var u in pendings_users)
        {
            list_of_last_pendings.Add(list_of_all_pendings.FindLast(FindUsersLastPendingMessage));
        }

        return list_of_last_pendings;
    }

    private bool FindUsersLastPendingMessage(Message mm)
    { 
        foreach(var g in pendings_users)
        {
            if (mm.UserName != Name && mm.UserName == g)
            {
                return true;
            }
            
            else return false;
        }
        return false;
    }

    private bool FindUsersPendingMessages(Message mm)
    {
        if (mm.UserName != Name && mm.IsPending) return true;
        else return false;
    }





    private async Task OnStatusChangedMethod(object sender, EventArgs e)
    {
        //Invoke StateHasChanged in an async call, helps align the thread with the Synchroniztion context
        await InvokeAsync(StateHasChanged);
    }
    protected override void OnInitialized()
    {
        //Unsubsribe once to make sure you only have one event subscription
        //This prevents event propogation, and won't do anything unless you are 
        //already subscribed for some reason
        //EventService.MyEvent -= OnStatusChangedMethod;

        //Subscribe to the event 
        EventService.MyEvent += OnStatusChangedMethod;
    }

    private string? Text { get; set; }

    private List<string> _messages = new();

    private string src { get; set; }

    private void SendMessage()
    {
        //isTyping = false;
        if (Text == null && string.IsNullOrEmpty(src)) return;
        MessageProducer.SendMessage(new Message()
        {
            UserName = UserService.UserName,
            Text = Text,
            Source = src
        });
        src = string.Empty;
        Text = null;
        //pending_message_sent = false;
    }

    private void SendPendingMessage(ChangeEventArgs  e)
    {
        Text = e.Value.ToString();
        //isTyping = true;

        if(Text != null)
        {
            //pending_message_sent = true;
            MessageProducer.SendMessage(new Message()
            {
                UserName = UserService.UserName,
                Text = Text,
                Source = src,
                IsPending = true
            });
        }
        //if (Text != null && Text.Length == 0)
        //    pending_message_sent = false;
    }

    private async Task DeleteMessageByUser(Message message)
    {
        await MessageHolder.DeleteMessage(message);
        MessageProducer.SendMessage(new Message()
        {
            Id = message.Id,
            MessageStatus = MessageStatus.DeletedByUser
        });
    }
    private async Task DeleteMessageToEveryone(Message message)
    {
        await MessageHolder.DeleteMessage(message);
        MessageProducer.SendMessage(new Message()
        {
            Id = message.Id,
            MessageStatus = MessageStatus.DeletedToEveryone
        });
    }
    private async Task ResizeAndDisplayImageUsingStreaming(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var resizedImage = 
            await imageFile.RequestImageFileAsync("image/jpg", 250, 250);
        var jsImageStream = resizedImage.OpenReadStream();
        byte[] bytes;
        using (var memoryStream = new MemoryStream())
        {
            await jsImageStream.CopyToAsync(memoryStream);
            bytes = memoryStream.ToArray();
        }

        var base64 = Convert.ToBase64String(bytes);
        src = $"data:image/jpg;base64,{base64}";
    }
}
