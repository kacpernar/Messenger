@page "/"
@using Messenger.Blazor.Services

@inject IMessageProducer MessageProducer
@inject IMessageHolder MessageHolder
@inject IUser User
@inject IJSRuntime Js
@inject EventService EventService

<PageTitle>Index</PageTitle>

<h1 >Your name: @User.Name</h1>

@if (User.Name == null)
{
    <input @bind="Name" />
    <button class="btn btn-primary" @onclick="SetName">Set name</button>
}

<br />
<br/>
<h1 class="text-center">Chat</h1>

<section class="discussion">

@foreach (var message in MessageHolder.MessageList)
{
    if (!message.UserName.Equals(User.Name))
    {
        <div class="name name-right">@message.UserName</div>
        <div class="bubble recipient">
            <div>@message.Text</div>
            <img src="@message.Source"/>
        </div>
    }
    else
    {
        <div class="msg">
            <div class="name name-left">@message.UserName</div>
            <div class="bubble sender middle" @onclick="() => {message.DeleteButtonsVisibility = !message.DeleteButtonsVisibility; }">
                <div>@message.Text</div>
                <img src="@message.Source"/>
            </div>
        </div>
        if (message.DeleteButtonsVisibility &&!message.Deleted)
        {
            <div class="rm-btns">
                <button class="btn rm-btn" @onclick="async() => await MessageHolder.DeleteMessage(message)">Usuń</button>
                <button class="btn rm-btn" @onclick="async() => await DeleteMessageToEveryone(message)">Usuń u wszystkich</button>
            </div> 
        }

    }
}

<input class="inpt" @bind="Text" />
<button class="btn btn-primary" @onclick="SendMessage">Send</button>
<InputFile OnChange="ResizeAndDisplayImageUsingStreaming" />
<img src="@src" />

</section>

@code {

    private string? Name { get; set; }

    private void SetName()
    {
        if(Name != null)
            User.Name = Name;
    }

    private async Task OnStatusChangedMethod(object sender, EventArgs e)
    {
        //Invoke StateHasChanged in an async call, helps align the thread with the Synchroniztion context
        await InvokeAsync(StateHasChanged);
    }
    protected override void OnInitialized()
    {
        //Unsubsribe once to make sure you only have one event subscription
        //This prevents event propogation, and won't do anything unless you are 
        //already subscribed for some reason
        //EventService.MyEvent -= OnStatusChangedMethod;

        //Subscribe to the event 
        EventService.MyEvent += OnStatusChangedMethod;
    }




    private string? Text { get; set; }

    private List<string> _messages = new();

    private string src { get; set; }

    private void SendMessage()
    {
        if (Text == null && string.IsNullOrEmpty(src)) return;
        MessageProducer.SendMessage(new Message()
        {
            UserName = User.Name,
            Text = Text,
            Source = src
        });
        src = string.Empty;
        Text = null;
    }

    private async Task DeleteMessageToEveryone(Message message)
    {
        await MessageHolder.DeleteMessage(message);
        MessageProducer.SendMessage(new Message()
            {
                Id = message.Id,
                DeleteMessage = true,
                Deleted = true
    });
    }
    private async Task ResizeAndDisplayImageUsingStreaming(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var resizedImage = 
            await imageFile.RequestImageFileAsync("image/jpg", 250, 250);
        var jsImageStream = resizedImage.OpenReadStream();
        byte[] bytes;
        using (var memoryStream = new MemoryStream())
        {
            await jsImageStream.CopyToAsync(memoryStream);
            bytes = memoryStream.ToArray();
        }

        var base64 = Convert.ToBase64String(bytes);
        src = $"data:image/jpg;base64,{base64}";
    }
}
