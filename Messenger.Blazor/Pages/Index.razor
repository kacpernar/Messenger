@page "/"
@using Messenger.Blazor.Services

@inject IMessageProducer MessageProducer
@inject IMessageHolder MessageHolder
@inject IUserService UserService
@inject IJSRuntime Js
@inject EventService EventService

<PageTitle>Index</PageTitle>

<h1 >Your name: @UserService.UserName</h1>

@if (UserService.UserName == null)
{
    <div>
        <input @bind="Name" />
        <input type="password" @bind="Password"/>
        <button class="btn btn-primary" @onclick="() => { LoginFailed = UserService.Login(Name, Password); }">Login</button>
        @if (LoginFailed)
        {
            <div style="color:red" >Login Failed. Try Again</div>
        }
    </div>
}
else
{
    <br />
    <br/>
    <h1 class="text-center">Chat</h1>

    <section class="discussion">

        @foreach (var message in MessageHolder.MessageList)
        {
            if (!message.UserName.Equals(UserService.UserName))
            {
                <div class="name name-right">@message.UserName</div>
                <div class="bubble recipient">
                    <div>@message.Text</div>
                    <img src="@message.Source"/>
                </div>
            }
            else
            {
                <div class="msg">
                    <div class="name name-left">@message.UserName</div>
                    <div class="bubble sender middle" @onclick="() => { message.DeleteButtonsVisibility = !message.DeleteButtonsVisibility; }">
                        <div>@message.Text</div>
                        <img src="@message.Source"/>
                    </div>
                </div>
                if (message.DeleteButtonsVisibility && message.MessageStatus==MessageStatus.None)
                {
                    <div class="rm-btns">
                        <button class="btn rm-btn" @onclick="async() => await DeleteMessageByUser(message)">Usuń</button>
                        <button class="btn rm-btn" @onclick="async() => await DeleteMessageToEveryone(message)">Usuń u wszystkich</button>
                    </div> 
                }

            }
        }

        <input class="inpt" @bind="Text" />
        <button class="btn btn-primary" @onclick="SendMessage">Send</button>
        <InputFile OnChange="ResizeAndDisplayImageUsingStreaming" />
        <img src="@src" />

    </section>
}


@code {

    private string? Name { get; set; }
    private string? Password { get; set; }
    bool LoginFailed { get; set; }


    private async Task OnStatusChangedMethod(object sender, EventArgs e)
    {
        //Invoke StateHasChanged in an async call, helps align the thread with the Synchroniztion context
        await InvokeAsync(StateHasChanged);
    }
    protected override void OnInitialized()
    {
        //Unsubsribe once to make sure you only have one event subscription
        //This prevents event propogation, and won't do anything unless you are 
        //already subscribed for some reason
        //EventService.MyEvent -= OnStatusChangedMethod;

        //Subscribe to the event 
        EventService.MyEvent += OnStatusChangedMethod;
    }

    private string? Text { get; set; }

    private List<string> _messages = new();

    private string src { get; set; }

    private void SendMessage()
    {
        if (Text == null && string.IsNullOrEmpty(src)) return;
        MessageProducer.SendMessage(new Message()
        {
            UserName = UserService.UserName,
            Text = Text,
            Source = src
        });
        src = string.Empty;
        Text = null;
    }

    private async Task DeleteMessageByUser(Message message)
    {
        await MessageHolder.DeleteMessage(message);
        MessageProducer.SendMessage(new Message()
        {
            Id = message.Id,
            MessageStatus = MessageStatus.DeletedByUser
        });
    }
    private async Task DeleteMessageToEveryone(Message message)
    {
        await MessageHolder.DeleteMessage(message);
        MessageProducer.SendMessage(new Message()
        {
            Id = message.Id,
            MessageStatus = MessageStatus.DeletedToEveryone
        });
    }
    private async Task ResizeAndDisplayImageUsingStreaming(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var resizedImage = 
            await imageFile.RequestImageFileAsync("image/jpg", 250, 250);
        var jsImageStream = resizedImage.OpenReadStream();
        byte[] bytes;
        using (var memoryStream = new MemoryStream())
        {
            await jsImageStream.CopyToAsync(memoryStream);
            bytes = memoryStream.ToArray();
        }

        var base64 = Convert.ToBase64String(bytes);
        src = $"data:image/jpg;base64,{base64}";
    }
}
